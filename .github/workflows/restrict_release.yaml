# name: Restrict Releases to Specific Branch

# on:
#   release:
#     types: [created]

# jobs:
#   check_release_branch:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get Release Information
#         run: echo "Release created from commit ${{ github.event.release.target_commitish }}"

#       - name: Check if release is from the allowed branch
#         run: |
#           ALLOWED_BRANCH="release"
#           RELEASE_BRANCH=${{ github.event.release.target_commitish }}

#           if [ "$RELEASE_BRANCH" != "$ALLOWED_BRANCH" ]; then
#             echo "❌ Releases are only allowed from the '$ALLOWED_BRANCH' branch."
#             exit 1
#           fi




name: Restrict Releases to "release" Branch

on:
  release:
    types: [created]

jobs:
  check_release_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Information
        run: echo "Release created from branch: ${{ github.event.release.target_commitish }}"

      - name: Check if release is from the 'release' branch
        run: |
          ALLOWED_BRANCH="release"
          RELEASE_BRANCH="${{ github.event.release.target_commitish }}"

          if [ "$RELEASE_BRANCH" != "$ALLOWED_BRANCH" ]; then
            echo "❌ Releases are only allowed from the '$ALLOWED_BRANCH' branch."
            exit 1
          fi

  delete_unauthorized_release:
    needs: check_release_branch
    if: failure()  # "release" 以外のブランチなら削除処理を実行
    runs-on: ubuntu-latest
    steps:
      - name: Get Release ID
        id: get_release_id
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # GITHUB_TOKEN では削除できないので PAT を使用
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.release.tag_name }}" | jq -r .id)

          if [ "$RELEASE_ID" = "null" ]; then
            echo "Failed to fetch release ID. Exiting."
            exit 1
          fi

          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Delete Unauthorized Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          echo "🚨 Unauthorized release deleted."

